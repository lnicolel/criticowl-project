{"ast":null,"code":"//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\n// ## identifyMarkedArea\n/**\n *\n * Identifies the area to be marked within the detected entitity's span, which is\n * extracted as the value.\n *\n * @param {number[]} mark contains the target area to be extracted from within\n *                        the entitity's span, defined as `[ firstIndex, lastIndex ]`.\n * @param {number} length of the entity's span.\n * @return {number[]}     array containing the modifiers for the orginal span.\n * @private\n*/\nconst identifyMarkedArea = function (mark, length) {\n  // Length Minus 1.\n  const lm1 = length - 1;\n  let [firstIndex, lastIndex] = mark;\n  if (firstIndex < 0) firstIndex += length;\n  firstIndex = Math.max(firstIndex, 0);\n  if (firstIndex > lm1) firstIndex = 0;\n  if (lastIndex < 0) lastIndex += length;\n  lastIndex = Math.min(lastIndex, lm1);\n  if (lastIndex < firstIndex) lastIndex = lm1;\n\n  // The `lastIndex` manoeuvre is required to keep identical approach\n  // being followed in `learnSinglePattern()` of automaton.js, where\n  // the `firstIndex` **was** being added and the `lastIndex` **was** being\n  // subtracted from the span of entity.\n  lastIndex = length - lastIndex - 1;\n  return [firstIndex, lastIndex];\n}; // identifyMarkedArea()\n\nmodule.exports = identifyMarkedArea;","map":{"version":3,"names":["identifyMarkedArea","mark","length","lm1","firstIndex","lastIndex","Math","max","min","module","exports"],"sources":["C:/Users/cheko/Desktop/Education/Freelance/criticowl-main/criticowl_frontend/node_modules/wink-nlp/src/identify-marked-area.js"],"sourcesContent":["//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\n// ## identifyMarkedArea\n/**\n *\n * Identifies the area to be marked within the detected entitity's span, which is\n * extracted as the value.\n *\n * @param {number[]} mark contains the target area to be extracted from within\n *                        the entitity's span, defined as `[ firstIndex, lastIndex ]`.\n * @param {number} length of the entity's span.\n * @return {number[]}     array containing the modifiers for the orginal span.\n * @private\n*/\nconst identifyMarkedArea = function ( mark, length ) {\n  // Length Minus 1.\n  const lm1 = length - 1;\n  let [ firstIndex, lastIndex ] = mark;\n\n  if ( firstIndex < 0 ) firstIndex += length;\n  firstIndex = Math.max( firstIndex, 0 );\n  if ( firstIndex > lm1 ) firstIndex = 0;\n\n  if ( lastIndex < 0 ) lastIndex += length;\n  lastIndex = Math.min( lastIndex, lm1 );\n  if ( lastIndex < firstIndex ) lastIndex = lm1;\n\n  // The `lastIndex` manoeuvre is required to keep identical approach\n  // being followed in `learnSinglePattern()` of automaton.js, where\n  // the `firstIndex` **was** being added and the `lastIndex` **was** being\n  // subtracted from the span of entity.\n  lastIndex = length - lastIndex - 1;\n  return [ firstIndex, lastIndex ];\n}; // identifyMarkedArea()\n\nmodule.exports = identifyMarkedArea;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,kBAAkB,GAAG,SAAAA,CAAWC,IAAI,EAAEC,MAAM,EAAG;EACnD;EACA,MAAMC,GAAG,GAAGD,MAAM,GAAG,CAAC;EACtB,IAAI,CAAEE,UAAU,EAAEC,SAAS,CAAE,GAAGJ,IAAI;EAEpC,IAAKG,UAAU,GAAG,CAAC,EAAGA,UAAU,IAAIF,MAAM;EAC1CE,UAAU,GAAGE,IAAI,CAACC,GAAG,CAAEH,UAAU,EAAE,CAAE,CAAC;EACtC,IAAKA,UAAU,GAAGD,GAAG,EAAGC,UAAU,GAAG,CAAC;EAEtC,IAAKC,SAAS,GAAG,CAAC,EAAGA,SAAS,IAAIH,MAAM;EACxCG,SAAS,GAAGC,IAAI,CAACE,GAAG,CAAEH,SAAS,EAAEF,GAAI,CAAC;EACtC,IAAKE,SAAS,GAAGD,UAAU,EAAGC,SAAS,GAAGF,GAAG;;EAE7C;EACA;EACA;EACA;EACAE,SAAS,GAAGH,MAAM,GAAGG,SAAS,GAAG,CAAC;EAClC,OAAO,CAAED,UAAU,EAAEC,SAAS,CAAE;AAClC,CAAC,CAAC,CAAC;;AAEHI,MAAM,CAACC,OAAO,GAAGV,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}