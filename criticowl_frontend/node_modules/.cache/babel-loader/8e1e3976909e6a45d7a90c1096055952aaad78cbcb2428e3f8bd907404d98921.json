{"ast":null,"code":"//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\nconst constants = require('./constants.js');\n// Bits reserved for `lemma`.\nconst bits4lemma = constants.bits4lemma;\n// Mask for extracting pos\nconst posMask = constants.posMask;\n// Size of a single token.\nconst tkSize = constants.tkSize;\n\n/**\n * This implementation is inspired by the hypothesis that *content salience is proportional\n * to the frequency of part-of-speech n-grams* as outlined in the paper titled,\n * [Examining the Content Load of Part of Speech Blocks for Information Retrieval](https://dl.acm.org/doi/10.5555/1273073.1273142).\n *\n * @param {object} rdd  Raw Document Data structure containing the document whose\n *                      sentence wise importance will be determined.\n * @returns {object[]}  array of objects, in form of `{ index: <integer>, importance: <0–1>}`,\n *                      where index points to the sentence; 1 means highest importance and 0 indicates lowest.\n */\nconst sentenceWiseImportance = function (rdd) {\n  // Define open class part-of-speeches; used to compute intitial information content\n  const openClassPOS = Object.create(null);\n  openClassPOS.ADJ = true;\n  openClassPOS.ADV = true;\n  openClassPOS.INTJ = true;\n  openClassPOS.NOUN = true;\n  openClassPOS.PROPN = true;\n  openClassPOS.VERB = true;\n  openClassPOS.NUM = true;\n  openClassPOS.SYM = true;\n  // N-gram to use to construct a pos group.\n  const NGram = 4;\n  const sentences = rdd.sentences;\n  const tokens = rdd.tokens;\n  const cache = rdd.cache;\n\n  // Used to build table of weights of pos groups. Apart from frequency, it also maintains\n  // (a) array of sentences, where a given pos group was found, (b) total weight computed as\n  // frequency minus count of closed class part-of-speech in the group.\n  const posGroupWeightTable = Object.create(null);\n  for (let s = 0; s < sentences.length; s += 1) {\n    const pos = [];\n    const [start, end] = sentences[s];\n    for (let t = start; t <= end; t += 1) {\n      const p = cache.valueOf('pos', (tokens[t * tkSize + 2] & posMask) >>> bits4lemma); // eslint-disable-line no-bitwise\n      if (p !== 'SPACE' && p !== 'PUNCT') pos.push(p);\n    }\n\n    // Ignore sentences where we cannot build NGram i.e. sentences shorter than NGram.\n    if (pos.length < 4) continue; // eslint-disable-line no-continue\n    // Determine NGrams;\n    for (let k = 0; k + NGram - 1 < pos.length; k += 1) {\n      const pos4Gram = pos.slice(k, k + NGram);\n      // Used to compute the weight for a pos group.\n      const initInfoContent = pos4Gram.reduce((pv, cv) => pv - (openClassPOS[cv] ? 0 : 1), 0);\n      const posGroup = pos4Gram.join('_');\n      posGroupWeightTable[posGroup] = posGroupWeightTable[posGroup] || Object.create(null);\n      posGroupWeightTable[posGroup].group = posGroup;\n      posGroupWeightTable[posGroup].sentences = posGroupWeightTable[posGroup].sentences || [];\n      posGroupWeightTable[posGroup].sentences.push(s); // ?\n      posGroupWeightTable[posGroup].weight = posGroupWeightTable[posGroup].weight === undefined ? initInfoContent + 1 : posGroupWeightTable[posGroup].weight + 1;\n      posGroupWeightTable[posGroup].iv = initInfoContent;\n    }\n  }\n\n  // Transform object into an array, and filter out elements with weight <= 0.\n  const posGroupWeights = Object.keys(posGroupWeightTable).map(e => posGroupWeightTable[e]).filter(e => e.weight > 0);\n  // This is an array index by each sentence's index and would contain the total weight\n  // computed by adding all the weights of each pos group found in that sentence.\n  const sentenceWiseWeights = new Array(sentences.length);\n  sentenceWiseWeights.fill(0);\n  posGroupWeights.forEach(pgw => {\n    pgw.sentences.forEach(e => {\n      sentenceWiseWeights[e] += pgw.weight;\n    });\n  });\n  // Normalize weights by dividing them by the max.\n  let max = Math.max(...sentenceWiseWeights);\n  // Avoid divide by zero situation\n  if (max === 0) max = 1;\n  return sentenceWiseWeights.map((e, i) => ({\n    index: i,\n    importance: +(e / max).toFixed(4)\n  }));\n};\nmodule.exports = sentenceWiseImportance;","map":{"version":3,"names":["constants","require","bits4lemma","posMask","tkSize","sentenceWiseImportance","rdd","openClassPOS","Object","create","ADJ","ADV","INTJ","NOUN","PROPN","VERB","NUM","SYM","NGram","sentences","tokens","cache","posGroupWeightTable","s","length","pos","start","end","t","p","valueOf","push","k","pos4Gram","slice","initInfoContent","reduce","pv","cv","posGroup","join","group","weight","undefined","iv","posGroupWeights","keys","map","e","filter","sentenceWiseWeights","Array","fill","forEach","pgw","max","Math","i","index","importance","toFixed","module","exports"],"sources":["C:/Users/cheko/Desktop/Education/Freelance/criticowl-main/criticowl_frontend/node_modules/wink-nlp/src/sentence-wise-importance.js"],"sourcesContent":["//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\nconst constants = require( './constants.js' );\n// Bits reserved for `lemma`.\nconst bits4lemma = constants.bits4lemma;\n// Mask for extracting pos\nconst posMask = constants.posMask;\n// Size of a single token.\nconst tkSize = constants.tkSize;\n\n/**\n * This implementation is inspired by the hypothesis that *content salience is proportional\n * to the frequency of part-of-speech n-grams* as outlined in the paper titled,\n * [Examining the Content Load of Part of Speech Blocks for Information Retrieval](https://dl.acm.org/doi/10.5555/1273073.1273142).\n *\n * @param {object} rdd  Raw Document Data structure containing the document whose\n *                      sentence wise importance will be determined.\n * @returns {object[]}  array of objects, in form of `{ index: <integer>, importance: <0–1>}`,\n *                      where index points to the sentence; 1 means highest importance and 0 indicates lowest.\n */\nconst sentenceWiseImportance = function ( rdd ) {\n    // Define open class part-of-speeches; used to compute intitial information content\n    const openClassPOS = Object.create(null);\n    openClassPOS.ADJ = true;\n    openClassPOS.ADV = true;\n    openClassPOS.INTJ = true;\n    openClassPOS.NOUN = true;\n    openClassPOS.PROPN = true;\n    openClassPOS.VERB = true;\n    openClassPOS.NUM = true;\n    openClassPOS.SYM = true;\n    // N-gram to use to construct a pos group.\n    const NGram = 4;\n    const sentences = rdd.sentences;\n    const tokens = rdd.tokens;\n    const cache = rdd.cache;\n\n    // Used to build table of weights of pos groups. Apart from frequency, it also maintains\n    // (a) array of sentences, where a given pos group was found, (b) total weight computed as\n    // frequency minus count of closed class part-of-speech in the group.\n    const posGroupWeightTable = Object.create( null );\n\n    for ( let s = 0; s < sentences.length; s += 1 ) {\n      const pos = [];\n      const [ start, end ] = sentences[ s ];\n      for ( let t = start; t <= end; t += 1 ) {\n        const p = cache.valueOf( 'pos', ( tokens[ ( t * tkSize ) + 2 ] & posMask ) >>> bits4lemma ); // eslint-disable-line no-bitwise\n        if ( p !== 'SPACE' && p !== 'PUNCT' ) pos.push( p );\n      }\n\n      // Ignore sentences where we cannot build NGram i.e. sentences shorter than NGram.\n      if ( pos.length < 4 ) continue; // eslint-disable-line no-continue\n      // Determine NGrams;\n      for ( let k = 0; k + NGram - 1 < pos.length; k += 1 ) {\n        const pos4Gram = pos.slice( k, k + NGram );\n        // Used to compute the weight for a pos group.\n        const initInfoContent = pos4Gram.reduce(\n          ( pv, cv ) => pv - ( ( openClassPOS[cv] ) ? 0 : 1 ),\n          0\n        );\n        const posGroup = pos4Gram.join( '_' );\n        posGroupWeightTable[ posGroup ] = posGroupWeightTable[ posGroup ] || Object.create( null );\n        posGroupWeightTable[ posGroup ].group = posGroup;\n        posGroupWeightTable[ posGroup ].sentences = posGroupWeightTable[ posGroup ].sentences || [];\n        posGroupWeightTable[ posGroup ].sentences.push( s ); // ?\n        posGroupWeightTable[ posGroup ].weight = ( posGroupWeightTable[ posGroup ].weight === undefined ) ?\n                                                  initInfoContent + 1 :\n                                                  ( posGroupWeightTable[ posGroup ].weight + 1 );\n        posGroupWeightTable[ posGroup ].iv = initInfoContent;\n      }\n    }\n\n    // Transform object into an array, and filter out elements with weight <= 0.\n    const posGroupWeights = Object.keys( posGroupWeightTable )\n                              .map( ( e ) => posGroupWeightTable[ e ] )\n                              .filter( ( e ) => e.weight > 0 );\n    // This is an array index by each sentence's index and would contain the total weight\n    // computed by adding all the weights of each pos group found in that sentence.\n    const sentenceWiseWeights = new Array( sentences.length );\n    sentenceWiseWeights.fill( 0 );\n    posGroupWeights.forEach( ( pgw ) => {\n      pgw.sentences.forEach( ( e ) => {\n         sentenceWiseWeights[ e ] += pgw.weight;\n        } );\n    });\n    // Normalize weights by dividing them by the max.\n    let max = Math.max( ...sentenceWiseWeights );\n    // Avoid divide by zero situation\n    if ( max === 0 ) max = 1;\n\n    return sentenceWiseWeights.map( ( e, i ) => ( { index: i, importance: +( e / max ).toFixed( 4 ) } ) );\n  };\n\n  module.exports = sentenceWiseImportance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}