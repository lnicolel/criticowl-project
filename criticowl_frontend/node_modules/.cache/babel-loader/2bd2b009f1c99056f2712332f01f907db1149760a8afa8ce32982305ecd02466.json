{"ast":null,"code":"export const getUserProfile = async token => {\n  const response = await fetch(\"http://127.0.0.1:8000/api/profile/\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Token ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch user profile');\n  }\n  return response.json();\n};\nexport const loginUser = async (email, password) => {\n  const response = await fetch(\"http://127.0.0.1:8000/api/login/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || 'Failed to login');\n  }\n  return response.json();\n};\nexport const getNotes = async token => {\n  const response = await fetch(\"http://127.0.0.1:8000/api/notes/\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Token ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch notes');\n  }\n  return response.json();\n};\nexport const saveNote = async (token, note) => {\n  const response = await fetch(\"http://127.0.0.1:8000/api/notes/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Token ${token}`\n    },\n    body: JSON.stringify(note)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to save note');\n  }\n  return response.json();\n};","map":{"version":3,"names":["getUserProfile","token","response","fetch","method","headers","ok","Error","json","loginUser","email","password","body","JSON","stringify","errorData","error","getNotes","saveNote","note"],"sources":["C:/Users/cheko/Desktop/Education/Freelance/criticowl-main/criticowl_frontend/src/api/api.js"],"sourcesContent":["export const getUserProfile = async (token) => {\r\n  const response = await fetch(\"http://127.0.0.1:8000/api/profile/\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Token ${token}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch user profile');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const loginUser = async (email, password) => {\r\n  const response = await fetch(\"http://127.0.0.1:8000/api/login/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to login');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getNotes = async (token) => {\r\n  const response = await fetch(\"http://127.0.0.1:8000/api/notes/\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Token ${token}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch notes');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const saveNote = async (token, note) => {\r\n  const response = await fetch(\"http://127.0.0.1:8000/api/notes/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Token ${token}`\r\n    },\r\n    body: JSON.stringify(note)\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to save note');\r\n  }\r\n\r\n  return response.json();\r\n};"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;IACjEC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,SAAQJ,KAAM;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;IAC/DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMS,SAAS,GAAG,MAAMb,QAAQ,CAACM,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACQ,SAAS,CAACC,KAAK,IAAI,iBAAiB,CAAC;EACvD;EAEA,OAAOd,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMS,QAAQ,GAAG,MAAOhB,KAAK,IAAK;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;IAC/DC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,SAAQJ,KAAM;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMU,QAAQ,GAAG,MAAAA,CAAOjB,KAAK,EAAEkB,IAAI,KAAK;EAC7C,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;IAC/DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,SAAQJ,KAAM;IAClC,CAAC;IACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACjB,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}