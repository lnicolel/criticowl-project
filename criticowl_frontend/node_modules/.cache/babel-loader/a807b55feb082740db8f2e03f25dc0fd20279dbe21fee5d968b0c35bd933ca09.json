{"ast":null,"code":"import axios from 'axios';\nexport const getUserProfile = async token => {\n  const response = await fetch(\"http://127.0.0.1:8000/api/users/profile/\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Token ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch user profile');\n  }\n  return response.json();\n};\nexport const loginUser = async (email, password) => {\n  const response = await fetch(\"http://127.0.0.1:8000/api/users/login/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || 'Failed to login');\n  }\n  return response.json();\n};\nconst token = localStorage.getItem('token');\nconst config = {\n  headers: {\n    Authorization: `Token ${token}`\n  }\n};\naxios.get('http://127.0.0.1:8000/api/list/', config).then(response => {\n  console.log(response.data);\n}).catch(error => {\n  console.error('Error fetching data:', error);\n});","map":{"version":3,"names":["axios","getUserProfile","token","response","fetch","method","headers","ok","Error","json","loginUser","email","password","body","JSON","stringify","errorData","error","localStorage","getItem","config","Authorization","get","then","console","log","data","catch"],"sources":["C:/Users/cheko/Desktop/Education/Freelance/reserv-copy/criticowl_frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const getUserProfile = async (token) => {\r\n  const response = await fetch(\"http://127.0.0.1:8000/api/users/profile/\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Token ${token}`\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch user profile');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const loginUser = async (email, password) => {\r\n  const response = await fetch(\"http://127.0.0.1:8000/api/users/login/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to login');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nconst token = localStorage.getItem('token');\r\nconst config = {\r\n  headers: { Authorization: `Token ${token}` }\r\n};\r\n\r\naxios.get('http://127.0.0.1:8000/api/list/', config)\r\n  .then(response => {\r\n    console.log(response.data);\r\n  })\r\n  .catch(error => {\r\n    console.error('Error fetching data:', error);\r\n  });\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;IACvEC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,SAAQJ,KAAM;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;IACrEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMS,SAAS,GAAG,MAAMb,QAAQ,CAACM,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACQ,SAAS,CAACC,KAAK,IAAI,iBAAiB,CAAC;EACvD;EAEA,OAAOd,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMP,KAAK,GAAGgB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAC3C,MAAMC,MAAM,GAAG;EACbd,OAAO,EAAE;IAAEe,aAAa,EAAG,SAAQnB,KAAM;EAAE;AAC7C,CAAC;AAEDF,KAAK,CAACsB,GAAG,CAAC,iCAAiC,EAAEF,MAAM,CAAC,CACjDG,IAAI,CAACpB,QAAQ,IAAI;EAChBqB,OAAO,CAACC,GAAG,CAACtB,QAAQ,CAACuB,IAAI,CAAC;AAC5B,CAAC,CAAC,CACDC,KAAK,CAACV,KAAK,IAAI;EACdO,OAAO,CAACP,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;AAC9C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}