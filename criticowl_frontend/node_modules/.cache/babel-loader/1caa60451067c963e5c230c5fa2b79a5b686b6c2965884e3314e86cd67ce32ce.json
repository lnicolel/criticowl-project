{"ast":null,"code":"//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\nvar consts = Object.create(null);\n// Unknown or the UNK!\nconsts.UNK = 0;\n// Bits reserved for `precedingSpaces`.\nconsts.bits4PrecedingSpace = 16;\n// Bits reserved for `lemma`.\nconsts.bits4lemma = 20;\n// Mask for pos extraction from tokens\nconsts.posMask = 0x3F00000;\n// Mask for preceding spaces.\nconsts.psMask = 0xFFFF;\n// Mask for pointer to normal in `xpansions`.\nconsts.xnMask = 0x3FFF0000;\n// Mask for lemma extraction in case of contractions.\nconsts.lemmaMask = 0xFFFFF;\n// Size of a single token.\nconsts.tkSize = 4;\n// Size of a single expansion.\nconsts.xpSize = 4; // can't: ca can can MD i.e. expansion, normal, lemma, pos.\n// Expansion count mask.\nconsts.xcMask = 0x1F;\n// Bits reserved for point to expansions in `lemma` space.\nconsts.bits4xpPointer = 14;\n// Negation Flag.\nconsts.negationFlag = Math.pow(2, 31);\nmodule.exports = consts;","map":{"version":3,"names":["consts","Object","create","UNK","bits4PrecedingSpace","bits4lemma","posMask","psMask","xnMask","lemmaMask","tkSize","xpSize","xcMask","bits4xpPointer","negationFlag","Math","pow","module","exports"],"sources":["C:/Users/cheko/Desktop/Education/Freelance/criticowl-main/criticowl_frontend/node_modules/wink-nlp/src/constants.js"],"sourcesContent":["//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\nvar consts = Object.create( null );\n// Unknown or the UNK!\nconsts.UNK = 0;\n// Bits reserved for `precedingSpaces`.\nconsts.bits4PrecedingSpace = 16;\n// Bits reserved for `lemma`.\nconsts.bits4lemma = 20;\n// Mask for pos extraction from tokens\nconsts.posMask = 0x3F00000;\n// Mask for preceding spaces.\nconsts.psMask = 0xFFFF;\n// Mask for pointer to normal in `xpansions`.\nconsts.xnMask = 0x3FFF0000;\n// Mask for lemma extraction in case of contractions.\nconsts.lemmaMask = 0xFFFFF;\n// Size of a single token.\nconsts.tkSize = 4;\n// Size of a single expansion.\nconsts.xpSize = 4; // can't: ca can can MD i.e. expansion, normal, lemma, pos.\n// Expansion count mask.\nconsts.xcMask = 0x1F;\n// Bits reserved for point to expansions in `lemma` space.\nconsts.bits4xpPointer = 14;\n// Negation Flag.\nconsts.negationFlag = Math.pow( 2, 31 );\n\nmodule.exports = consts;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAIA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAE,IAAK,CAAC;AAClC;AACAF,MAAM,CAACG,GAAG,GAAG,CAAC;AACd;AACAH,MAAM,CAACI,mBAAmB,GAAG,EAAE;AAC/B;AACAJ,MAAM,CAACK,UAAU,GAAG,EAAE;AACtB;AACAL,MAAM,CAACM,OAAO,GAAG,SAAS;AAC1B;AACAN,MAAM,CAACO,MAAM,GAAG,MAAM;AACtB;AACAP,MAAM,CAACQ,MAAM,GAAG,UAAU;AAC1B;AACAR,MAAM,CAACS,SAAS,GAAG,OAAO;AAC1B;AACAT,MAAM,CAACU,MAAM,GAAG,CAAC;AACjB;AACAV,MAAM,CAACW,MAAM,GAAG,CAAC,CAAC,CAAC;AACnB;AACAX,MAAM,CAACY,MAAM,GAAG,IAAI;AACpB;AACAZ,MAAM,CAACa,cAAc,GAAG,EAAE;AAC1B;AACAb,MAAM,CAACc,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAE,CAAC,EAAE,EAAG,CAAC;AAEvCC,MAAM,CAACC,OAAO,GAAGlB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}