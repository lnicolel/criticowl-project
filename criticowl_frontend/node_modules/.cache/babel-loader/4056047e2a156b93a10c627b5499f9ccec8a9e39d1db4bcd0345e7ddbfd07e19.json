{"ast":null,"code":"//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\nvar regex = /\\[.*?\\]/g;\n\n// ## extractEnclosedText\n/**\n *\n * Extracts the text enclosed in square brackets.\n *\n * @param {string} text from which enclosed text is extracted.\n * @returns {string[]} texts enclosed within square brackets.\n * @private\n*/\nvar extractEnclosedText = function (text) {\n  var\n    // Extracted elements are captured here.\n    elements = [],\n    // Extract matches with quotes\n    matches = text.match(regex);\n  if (!matches || matches.length === 0) return null;\n  // Collect elements after removing the quotes.\n  for (var k = 0, kmax = matches.length; k < kmax; k += 1) {\n    elements.push(matches[k].substr(1, matches[k].length - 2));\n  }\n  return elements;\n}; // extractEnclosedText();\n\n// ## productReducer\n/**\n *\n * Callback function used by `reduce` inside the `product()` function.\n * Follows the standard guidelines of `reduce()` callback function.\n *\n * @param {array} prev refer to JS reduce function.\n * @param {array} curr refer to JS reduce function.\n * @returns {array} reduced value.\n * @private\n*/\nvar productReducer = function (prev, curr) {\n  var c,\n    cmax = curr.length;\n  var p,\n    pmax = prev.length;\n  var result = [];\n  for (p = 0; p < pmax; p += 1) {\n    for (c = 0; c < cmax; c += 1) {\n      result.push(prev[p].concat(curr[c]));\n    }\n  }\n  return result;\n}; // productReducer()\n\n/**\n *\n * Finds the Cartesian Product of arrays present inside the array `a`. Therefore\n * the array `a` must be an array of 1-dimensional arrays. For example,\n * `product( [ [ 9, 8 ], [ 1, 2 ] ] )` will produce\n * `[ [ 9, 1 ], [ 9, 2 ], [ 8, 1 ], [ 8, 2 ] ]`.\n *\n * @param {array} a whose cartesian product is computed.\n * @returns {array} reduced value.\n * @private\n*/\nvar product = function (a) {\n  return a.reduce(productReducer, [[]]);\n}; // product()\n\n// ## composeCorpus\n/**\n *\n * Generates all possible patterns from the input argument string.\n * The string s must follow a special syntax as illustrated in the\n * example below:<br/>\n * `'[I] [am having|have] [a] [problem|question]'`<br/>\n *\n * Each phrase must be quoted between `[ ]` and each possible option of phrases\n * (if any) must be separated by a `|` character. The patterns are composed by\n * computing the cartesian product of all the phrases.\n *\n * If a single patterns expands to a large size then it issues console\n * warning/error at 512/65536 level.\n *\n * @param {string} str the input string.\n * @return {string[]} of all possible patterns.\n * @private\n*/\nvar composePatterns = function (str) {\n  if (!str || typeof str !== 'string') return [];\n  const LIMIT1 = 512;\n  const LIMIT2 = 65536;\n  var quotedTextElems = extractEnclosedText(str);\n  var patterns = [];\n  var finalPatterns = [];\n  if (!quotedTextElems) return [[str]];\n  quotedTextElems.forEach(function (e) {\n    patterns.push(e.split('|'));\n  });\n\n  // Compute the size of the array that will be produced as a result of processing\n  // the pattern.\n  const size = patterns.reduce((prev, curr) => prev * curr.length, 1);\n\n  // Issue warning/error if the size is prohibitively large from the end-user\n  // prespective. Note: while winkNLP can handle even larger sizes, it can\n  // still break down in the event of explosion!\n  if (size > LIMIT1 && size < LIMIT2) {\n    console.warn('winkNLP: complex pattern detected, consider simplifying it!');\n  } else if (size > LIMIT2) console.error('winkNLP: very complex pattern detected, please review and simplify.\\n' + '         === It may slow down further execution! ===\\n\\n');\n  product(patterns).forEach(function (e) {\n    finalPatterns.push(e.join(' ').trim().split(/\\s+/));\n  });\n  return finalPatterns;\n}; // composePatterns()\n\nmodule.exports = composePatterns;","map":{"version":3,"names":["regex","extractEnclosedText","text","elements","matches","match","length","k","kmax","push","substr","productReducer","prev","curr","c","cmax","p","pmax","result","concat","product","a","reduce","composePatterns","str","LIMIT1","LIMIT2","quotedTextElems","patterns","finalPatterns","forEach","e","split","size","console","warn","error","join","trim","module","exports"],"sources":["C:/Users/cheko/Desktop/Education/Freelance/criticowl-main/criticowl_frontend/node_modules/wink-nlp/src/compose-patterns.js"],"sourcesContent":["//     wink-nlp\n//\n//     Copyright (C) GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-nlp”.\n//\n//     Permission is hereby granted, free of charge, to any\n//     person obtaining a copy of this software and\n//     associated documentation files (the \"Software\"), to\n//     deal in the Software without restriction, including\n//     without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell\n//     copies of the Software, and to permit persons to\n//     whom the Software is furnished to do so, subject to\n//     the following conditions:\n//\n//     The above copyright notice and this permission notice\n//     shall be included in all copies or substantial\n//     portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n//     ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n//     TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n//     PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//     DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n//     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n//\n\nvar regex = /\\[.*?\\]/g;\n\n// ## extractEnclosedText\n/**\n *\n * Extracts the text enclosed in square brackets.\n *\n * @param {string} text from which enclosed text is extracted.\n * @returns {string[]} texts enclosed within square brackets.\n * @private\n*/\nvar extractEnclosedText = function ( text ) {\n  var // Extracted elements are captured here.\n      elements = [],\n      // Extract matches with quotes\n      matches = text.match( regex );\n  if ( !matches || ( matches.length === 0 ) ) return null;\n  // Collect elements after removing the quotes.\n  for ( var k = 0, kmax = matches.length; k < kmax; k += 1 ) {\n    elements.push( matches[ k ].substr( 1, matches[ k ].length - 2 ) );\n  }\n  return ( elements );\n}; // extractEnclosedText();\n\n// ## productReducer\n/**\n *\n * Callback function used by `reduce` inside the `product()` function.\n * Follows the standard guidelines of `reduce()` callback function.\n *\n * @param {array} prev refer to JS reduce function.\n * @param {array} curr refer to JS reduce function.\n * @returns {array} reduced value.\n * @private\n*/\nvar productReducer = function ( prev, curr ) {\n  var c,\n      cmax = curr.length;\n  var p,\n      pmax = prev.length;\n  var result = [];\n\n  for ( p = 0; p < pmax; p += 1 ) {\n    for ( c = 0; c < cmax; c += 1 ) {\n      result.push( prev[ p ].concat( curr[ c ] ) );\n    }\n  }\n  return ( result );\n}; // productReducer()\n\n/**\n *\n * Finds the Cartesian Product of arrays present inside the array `a`. Therefore\n * the array `a` must be an array of 1-dimensional arrays. For example,\n * `product( [ [ 9, 8 ], [ 1, 2 ] ] )` will produce\n * `[ [ 9, 1 ], [ 9, 2 ], [ 8, 1 ], [ 8, 2 ] ]`.\n *\n * @param {array} a whose cartesian product is computed.\n * @returns {array} reduced value.\n * @private\n*/\nvar product = function ( a ) {\n  return (\n    a.reduce( productReducer, [ [] ] )\n  );\n}; // product()\n\n\n// ## composeCorpus\n/**\n *\n * Generates all possible patterns from the input argument string.\n * The string s must follow a special syntax as illustrated in the\n * example below:<br/>\n * `'[I] [am having|have] [a] [problem|question]'`<br/>\n *\n * Each phrase must be quoted between `[ ]` and each possible option of phrases\n * (if any) must be separated by a `|` character. The patterns are composed by\n * computing the cartesian product of all the phrases.\n *\n * If a single patterns expands to a large size then it issues console\n * warning/error at 512/65536 level.\n *\n * @param {string} str the input string.\n * @return {string[]} of all possible patterns.\n * @private\n*/\nvar composePatterns = function ( str ) {\n  if ( !str || ( typeof str !== 'string' ) ) return [];\n\n  const LIMIT1 = 512;\n  const LIMIT2 = 65536;\n  var quotedTextElems = extractEnclosedText( str );\n  var patterns = [];\n  var finalPatterns = [];\n\n  if ( !quotedTextElems ) return [ [ str ] ];\n  quotedTextElems.forEach( function ( e ) {\n    patterns.push( e.split( '|' ) );\n  } );\n\n  // Compute the size of the array that will be produced as a result of processing\n  // the pattern.\n  const size = patterns.reduce( ( ( prev, curr ) => prev * curr.length ), 1 );\n\n  // Issue warning/error if the size is prohibitively large from the end-user\n  // prespective. Note: while winkNLP can handle even larger sizes, it can\n  // still break down in the event of explosion!\n  if ( size > LIMIT1 && size < LIMIT2 ) {\n    console.warn( 'winkNLP: complex pattern detected, consider simplifying it!' );\n  } else if ( size > LIMIT2 ) console.error(\n                              'winkNLP: very complex pattern detected, please review and simplify.\\n' +\n                              '         === It may slow down further execution! ===\\n\\n'\n                             );\n\n  product( patterns ).forEach( function ( e ) {\n    finalPatterns.push( e.join( ' ' ).trim().split( /\\s+/ ) );\n  } );\n  return ( finalPatterns );\n}; // composePatterns()\n\nmodule.exports = composePatterns;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}